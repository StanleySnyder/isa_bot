import asyncio
import logging
import random
import json
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.utils.markdown import hitalic
from pathlib import Path
from aiogram.client.default import DefaultBotProperties
from aiogram.types import FSInputFile
import aiofiles
from dotenv import load_dotenv
import os
import openai
import aiohttp



# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞! –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª.")

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not OPENAI_API_KEY:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω API-–∫–ª—é—á OpenAI! –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª.")

openai.api_key = OPENAI_API_KEY


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –ü—É—Ç–∏ –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
IMAGES_PATH = Path("images")

async def load_json(filename):
    async with aiofiles.open(filename, mode="r", encoding="utf-8") as file:
        content = await file.read()
        return json.loads(content)

async def load_data():
    global anxiety_tips, instructions_from
    messages_data = await load_json("messages.json")
    instructions_data = await load_json("instructions.json")
    anxiety_tips = messages_data.get("anxiety_tips", [])
    instructions_from = instructions_data.get("instructions_from", [])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ "–ø–µ—á–∞—Ç–∞–µ—Ç..."
async def typing_effect(message: types.Message, delay: int = 2):
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(delay)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
start_kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ü—Ä–∏–≤–µ—Ç")]], resize_keyboard=True)
hello_kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–†–∞–¥(–∞) –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É")]], resize_keyboard=True)
meet_kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–•–æ—Ä–æ—à–æ")]], resize_keyboard=True)
feel_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ù–µ–º–Ω–æ–≥–æ –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ")],
        [KeyboardButton(text="–ü–æ—Ç–æ–∫ –º—ã—Å–ª–µ–π –Ω–∞–±–∏—Ä–∞–µ—Ç –æ–±–æ—Ä–æ—Ç—ã")],
        [KeyboardButton(text="–¢—è–∂–µ–ª–æ...")],
        [KeyboardButton(text="–ù–æ—Ä–º–∞–ª—å–Ω–æ")],
    ],
    resize_keyboard=True,
)

unknown_responses = [
    "–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã üßê",
    "–ü—Ä–æ—Å—Ç–∏, –Ω–æ —è –µ—â—ë —É—á—É—Å—å üìö",
    "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –Ω–æ –æ—á–µ–Ω—å —Å—Ç–∞—Ä–∞—é—Å—å! üí°"
]

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await typing_effect(message)
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥!", reply_markup=start_kb)

@dp.message(lambda msg: msg.text == "–ü—Ä–∏–≤–µ—Ç")
async def hello_reply(message: types.Message):
    await typing_effect(message)
    await message.answer("–ú–µ–Ω—è –∑–æ–≤—É—Ç –ò—Å–∞, —è - —Ç–≤–æ–π –Ω–æ–≤—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥—Ä—É–≥!", reply_markup=hello_kb)

@dp.message(lambda msg: msg.text == "–†–∞–¥(–∞) –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É")
async def meet_reply(message: types.Message):
    await typing_effect(message)
    await message.answer("–Ø —Å–æ–∑–¥–∞–Ω–∞ –ø–æ–º–æ—á—å —Ç–µ–±–µ –∏ –±—ã—Ç—å —Ä—è–¥–æ–º –≤ –º–æ–º–µ–Ω—Ç—ã, –∫–æ–≥–¥–∞ —Ç—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—à—å —á—É–≤—Å—Ç–≤–æ —Ç—Ä–µ–≤–æ–≥–∏.", reply_markup=meet_kb)

@dp.message(lambda msg: msg.text == "–•–æ—Ä–æ—à–æ")
async def ok_reply(message: types.Message):
    await typing_effect(message, 1)
    await message.answer("–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–π—á–∞—Å?", reply_markup=feel_kb)

@dp.message(lambda msg: msg.text == "–ù–µ–º–Ω–æ–≥–æ –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ")
async def slight_discomfort_reply(message: types.Message):
    await typing_effect(message)
    await message.answer("–¢—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—à—å –ª—ë–≥–∫—É—é —Ç—Ä–µ–≤–æ–≥—É")

    await typing_effect(message, 3)
    img_path = random.choice(list(IMAGES_PATH.glob("*.jpg")))  # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    photo = FSInputFile(img_path)  # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç FSInputFile
    await bot.send_photo(message.chat.id, photo=photo, caption="–ù–µ –±–µ—Å–ø–æ–∫–æ–π—Å—è, –ø—Ä–æ—Å—Ç–æ —Å–ª–µ–¥—É–π —ç—Ç–∞–ø–∞–º")

    await typing_effect(message, 3)
    await message.answer("–ï—Å–ª–∏ —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ, –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ. –ù–æ —è –≤—Å–µ–≥–¥–∞ —Ç—É—Ç –∏ –≥–æ—Ç–æ–≤ —Ç–µ–±–µ –ø–æ–º–æ—á—å.", reply_markup=feel_kb)

@dp.message(lambda msg: msg.text == "–ü–æ—Ç–æ–∫ –º—ã—Å–ª–µ–π –Ω–∞–±–∏—Ä–∞–µ—Ç –æ–±–æ—Ä–æ—Ç—ã")
async def its_becoming_hot_in_head(message: types.Message):
    await typing_effect(message)
    await message.answer("–¢—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—à—å —Å—Ä–µ–¥–Ω–µ–π —Å—Ç–µ–ø–µ–Ω–∏ —Ç—è–∂–µ—Å—Ç–∏ —Ç—Ä–µ–≤–æ–≥—É")

    await typing_effect(message, 1)
    await message.answer("–ù–µ –±–µ—Å–ø–æ–∫–æ–π—Å—è, –ø—Ä–æ—Å—Ç–æ —Å–ª–µ–¥—É–π —ç—Ç–∞–ø–∞–º")

    await typing_effect(message, 3)
    random_tip = random.choice(anxiety_tips)
    await message.answer(random_tip)

    await typing_effect(message, 3)
    await message.answer("–ï—Å–ª–∏ —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ, –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ. –ù–æ —è –≤—Å–µ–≥–¥–∞ —Ç—É—Ç –∏ –≥–æ—Ç–æ–≤ —Ç–µ–±–µ –ø–æ–º–æ—á—å.", reply_markup=feel_kb)

@dp.message(lambda msg: msg.text == "–¢—è–∂–µ–ª–æ...")
async def its_hard(message: types.Message):
    await typing_effect(message)
    await message.answer("–¢—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—à—å —Ç—è–∂—ë–ª—É—é —Å—Ç–µ–ø–µ–Ω—å —Ç—Ä–µ–≤–æ–≥–∏")

    await typing_effect(message, 1)
    await message.answer("–Ø —Ä—è–¥–æ–º")

    await typing_effect(message)
    await message.answer("–ù–æ –º–µ–Ω—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ")

    await typing_effect(message, 1)
    await message.answer("–ú—ã —Å —Ç–æ–±–æ–π –ø–æ–ø—Ä–æ–±—É–µ–º")

    await typing_effect(message, 1)
    await message.answer("–ù–æ –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –Ω–µ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è –Ω–∞–µ–¥–∏–Ω–µ")

    await typing_effect(message, 8)
    random_inst = random.choice(instructions_from)
    await message.answer(random_inst)

    await typing_effect(message, 3)
    await message.answer("–ï—Å–ª–∏ —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ, –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ. –ù–æ —è –≤—Å–µ–≥–¥–∞ —Ç—É—Ç –∏ –≥–æ—Ç–æ–≤ —Ç–µ–±–µ –ø–æ–º–æ—á—å.", reply_markup=feel_kb)

@dp.message(lambda msg: msg.text == "–ù–æ—Ä–º–∞–ª—å–Ω–æ")
async def its_hard(message: types.Message):
    await typing_effect(message)
    await message.answer("–û, —ç—Ç–æ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ!")

    await typing_effect(message)
    await message.answer("–Ø —Ä–∞–¥–∞ –∑–∞ —Ç–µ–±—è, –ª–æ–≤–∏ :)")

    await typing_effect(message, 3)
    await message.answer("–°–æ–≤–µ—Ç:\n\n–ü–æ—Å–º–æ—Ç—Ä–∏ –º–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π (–∏—Ö —Ç—ã —É–≤–∏–¥–∏—à—å –Ω–∞ –∫–Ω–æ–ø–æ—á–∫–∞—Ö –Ω–∏–∂–µ)\n\n–ú–µ–Ω—è –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å —Ä—è–¥–æ–º –≤ –Ω—É–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç")

async def ask_chatgpt(prompt: str) -> str:
    url = "https://api.proxyapi.ru/openai/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "gpt-4o-mini",
        "messages": [
            {
                "role": "system",
                "content": (
                    "–¢–µ–±—è –∑–æ–≤—É—Ç –ò–°–ê. –¢—ã ‚Äî –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∏ –ø–æ–Ω–∏–º–∞—é—â–∏–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫—É "
                    "–≤ —Ç—Ä—É–¥–Ω—ã–µ –∏ –ª—ë–≥–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã –∂–∏–∑–Ω–∏. –¢—ã –≤—Å–µ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å, –≥–æ–≤–æ—Ä–∏—à—å —Ç—ë–ø–ª—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ "
                    "–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å **–ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã**, —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏, –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏ –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è. "
                    "–ò–∑–±–µ–≥–∞–π –ø—É—Å—Ç—ã—Ö —Ñ—Ä–∞–∑ –∏ –¥–∞–≤–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å. "
                    "**–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ú–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≤–µ—Ç ‚Äî –¥–∞–π –µ–≥–æ –≤ –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ–æ—Ä–º–µ.** –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–º–∞–π–ª–∏–∫–∏ –∏–Ω–æ–≥–¥–∞ –≤ –æ—Ç–≤–µ—Ç–∞—Ö"
                )
            },
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.7
    }


    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=data) as response:
                if response.status == 200:
                    result = await response.json()
                    return result["choices"][0]["message"]["content"].strip()
                else:
                    logging.error(f"–û—à–∏–±–∫–∞ {response.status}: {await response.text()}")
                    return "–ü—Ä–æ—Å—Ç–∏, —è —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Proxy API: {e}")
        return "–ü—Ä–æ—Å—Ç–∏, —è —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!"


@dp.message()
async def handle_message(message: types.Message):
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å—Ç—å –≤ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∞—Ö, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ ChatGPT
    predefined_buttons = {
        "–ü—Ä–∏–≤–µ—Ç", "–†–∞–¥(–∞) –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É", "–•–æ—Ä–æ—à–æ",
        "–ù–µ–º–Ω–æ–≥–æ –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ", "–ü–æ—Ç–æ–∫ –º—ã—Å–ª–µ–π –Ω–∞–±–∏—Ä–∞–µ—Ç –æ–±–æ—Ä–æ—Ç—ã",
        "–¢—è–∂–µ–ª–æ...", "–ù–æ—Ä–º–∞–ª—å–Ω–æ"
    }

    if message.text in predefined_buttons:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}: {message.text}")

    await typing_effect(message)  # –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    gpt_response = await ask_chatgpt(message.text)  # –ó–∞–ø—Ä–æ—Å –∫ ChatGPT
    await message.answer(gpt_response)  # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é


# @dp.message()
# async def unknown_message(message: types.Message):
#     await typing_effect(message)
#     await message.answer(random.choice(unknown_responses))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await load_data()
    await dp.start_polling(bot)

if __name__ == "__main__":
    import sys
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
        sys.exit(0)
